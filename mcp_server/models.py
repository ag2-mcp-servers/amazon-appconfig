# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T09:38:05+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel, SecretStr, confloat, conint, constr


class ActionPoint(Enum):
    PRE_CREATE_HOSTED_CONFIGURATION_VERSION = 'PRE_CREATE_HOSTED_CONFIGURATION_VERSION'
    PRE_START_DEPLOYMENT = 'PRE_START_DEPLOYMENT'
    ON_DEPLOYMENT_START = 'ON_DEPLOYMENT_START'
    ON_DEPLOYMENT_STEP = 'ON_DEPLOYMENT_STEP'
    ON_DEPLOYMENT_BAKING = 'ON_DEPLOYMENT_BAKING'
    ON_DEPLOYMENT_COMPLETE = 'ON_DEPLOYMENT_COMPLETE'
    ON_DEPLOYMENT_ROLLED_BACK = 'ON_DEPLOYMENT_ROLLED_BACK'


class Arn(
    RootModel[
        constr(
            pattern=r'arn:(aws[a-zA-Z-]*)?:[a-z]+:([a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\d{1})?:(\d{12})?:[a-zA-Z0-9-_/:.]+',
            min_length=20,
            max_length=2048,
        )
    ]
):
    root: constr(
        pattern=r'arn:(aws[a-zA-Z-]*)?:[a-z]+:([a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\d{1})?:(\d{12})?:[a-zA-Z0-9-_/:.]+',
        min_length=20,
        max_length=2048,
    )


class BadRequestException(RootModel[Any]):
    root: Any


class Blob(RootModel[SecretStr]):
    root: SecretStr


class Boolean(RootModel[bool]):
    root: bool


class Configuration(BaseModel):
    Content: Optional[Blob] = None


class ConfigurationProfileType(RootModel[constr(pattern=r'^[a-zA-Z\.]+')]):
    root: constr(pattern=r'^[a-zA-Z\.]+')


class ConflictException(RootModel[Any]):
    root: Any


class CreateHostedConfigurationVersionRequest(BaseModel):
    Content: Blob


class DeleteApplicationRequest(BaseModel):
    pass


class DeleteConfigurationProfileRequest(BaseModel):
    pass


class DeleteDeploymentStrategyRequest(BaseModel):
    pass


class DeleteEnvironmentRequest(BaseModel):
    pass


class DeleteExtensionAssociationRequest(BaseModel):
    pass


class DeleteExtensionRequest(BaseModel):
    pass


class DeleteHostedConfigurationVersionRequest(BaseModel):
    pass


class DeploymentEventType(Enum):
    PERCENTAGE_UPDATED = 'PERCENTAGE_UPDATED'
    ROLLBACK_STARTED = 'ROLLBACK_STARTED'
    ROLLBACK_COMPLETED = 'ROLLBACK_COMPLETED'
    BAKE_TIME_STARTED = 'BAKE_TIME_STARTED'
    DEPLOYMENT_STARTED = 'DEPLOYMENT_STARTED'
    DEPLOYMENT_COMPLETED = 'DEPLOYMENT_COMPLETED'


class DeploymentState(Enum):
    BAKING = 'BAKING'
    VALIDATING = 'VALIDATING'
    DEPLOYING = 'DEPLOYING'
    COMPLETE = 'COMPLETE'
    ROLLING_BACK = 'ROLLING_BACK'
    ROLLED_BACK = 'ROLLED_BACK'


class DeploymentStrategyId(
    RootModel[constr(pattern=r'(^[a-z0-9]{4,7}$|^AppConfig\.[A-Za-z0-9]{9,40}$)')]
):
    root: constr(pattern=r'(^[a-z0-9]{4,7}$|^AppConfig\.[A-Za-z0-9]{9,40}$)')


class Description(RootModel[constr(min_length=0, max_length=1024)]):
    root: constr(min_length=0, max_length=1024)


class EnvironmentState(Enum):
    READY_FOR_DEPLOYMENT = 'READY_FOR_DEPLOYMENT'
    DEPLOYING = 'DEPLOYING'
    ROLLING_BACK = 'ROLLING_BACK'
    ROLLED_BACK = 'ROLLED_BACK'


class GetApplicationRequest(BaseModel):
    pass


class GetConfigurationProfileRequest(BaseModel):
    pass


class GetConfigurationRequest(BaseModel):
    pass


class GetDeploymentRequest(BaseModel):
    pass


class GetDeploymentStrategyRequest(BaseModel):
    pass


class GetEnvironmentRequest(BaseModel):
    pass


class GetExtensionAssociationRequest(BaseModel):
    pass


class GetExtensionRequest(BaseModel):
    pass


class GetHostedConfigurationVersionRequest(BaseModel):
    pass


class GrowthFactor(RootModel[confloat(ge=1.0, le=100.0)]):
    root: confloat(ge=1.0, le=100.0)


class GrowthType(Enum):
    LINEAR = 'LINEAR'
    EXPONENTIAL = 'EXPONENTIAL'


class HostedConfigurationVersion(BaseModel):
    Content: Optional[Blob] = None


class Id(RootModel[constr(pattern=r'[a-z0-9]{4,7}')]):
    root: constr(pattern=r'[a-z0-9]{4,7}')


class Identifier(RootModel[constr(min_length=1, max_length=2048)]):
    root: constr(min_length=1, max_length=2048)


class Integer(RootModel[int]):
    root: int


class InternalServerException(RootModel[Any]):
    root: Any


class Iso8601DateTime(RootModel[datetime]):
    root: datetime


class ListApplicationsRequest(BaseModel):
    pass


class ListConfigurationProfilesRequest(BaseModel):
    pass


class ListDeploymentStrategiesRequest(BaseModel):
    pass


class ListDeploymentsRequest(BaseModel):
    pass


class ListEnvironmentsRequest(BaseModel):
    pass


class ListExtensionAssociationsRequest(BaseModel):
    pass


class ListExtensionsRequest(BaseModel):
    pass


class ListHostedConfigurationVersionsRequest(BaseModel):
    pass


class ListTagsForResourceRequest(BaseModel):
    pass


class LongName(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class MaxResults(RootModel[conint(ge=1, le=50)]):
    root: conint(ge=1, le=50)


class MinutesBetween0And24Hours(RootModel[conint(ge=0, le=1440)]):
    root: conint(ge=0, le=1440)


class Name(RootModel[constr(min_length=1, max_length=64)]):
    root: constr(min_length=1, max_length=64)


class NextToken(RootModel[constr(min_length=1, max_length=2048)]):
    root: constr(min_length=1, max_length=2048)


class Parameter(BaseModel):
    Description_1: Optional[Description] = Field(None, alias='Description')
    Required: Optional[Boolean] = None


class ParameterMap(RootModel[Optional[Dict[str, Parameter]]]):
    root: Optional[Dict[str, Parameter]] = None


class PayloadTooLargeException(RootModel[Any]):
    root: Any


class Percentage(RootModel[confloat(ge=1.0, le=100.0)]):
    root: confloat(ge=1.0, le=100.0)


class QueryName(RootModel[constr(min_length=1, max_length=64)]):
    root: constr(min_length=1, max_length=64)


class ReplicateTo(Enum):
    NONE = 'NONE'
    SSM_DOCUMENT = 'SSM_DOCUMENT'


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class RoleArn(
    RootModel[
        constr(
            pattern=r'^((arn):(aws|aws-cn|aws-iso|aws-iso-[a-z]{1}|aws-us-gov):(iam)::\d{12}:role[/].*)$',
            min_length=20,
            max_length=2048,
        )
    ]
):
    root: constr(
        pattern=r'^((arn):(aws|aws-cn|aws-iso|aws-iso-[a-z]{1}|aws-us-gov):(iam)::\d{12}:role[/].*)$',
        min_length=20,
        max_length=2048,
    )


class ServiceQuotaExceededException(RootModel[Any]):
    root: Any


class StopDeploymentRequest(BaseModel):
    pass


class String(RootModel[str]):
    root: str


class StringWithLengthBetween0And32768(RootModel[SecretStr]):
    root: SecretStr


class StringWithLengthBetween1And2048(RootModel[constr(min_length=1, max_length=2048)]):
    root: constr(min_length=1, max_length=2048)


class StringWithLengthBetween1And255(RootModel[constr(min_length=1, max_length=255)]):
    root: constr(min_length=1, max_length=255)


class StringWithLengthBetween1And64(RootModel[constr(min_length=1, max_length=64)]):
    root: constr(min_length=1, max_length=64)


class TagKey(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class TagKeyList(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=50, min_length=0)


class TagValue(RootModel[constr(max_length=256)]):
    root: constr(max_length=256)


class TriggeredBy(Enum):
    USER = 'USER'
    APPCONFIG = 'APPCONFIG'
    CLOUDWATCH_ALARM = 'CLOUDWATCH_ALARM'
    INTERNAL_ERROR = 'INTERNAL_ERROR'


class UntagResourceRequest(BaseModel):
    pass


class UpdateApplicationRequest(BaseModel):
    Description_1: Optional[Description] = Field(None, alias='Description')
    Name_1: Optional[Name] = Field(None, alias='Name')


class UpdateDeploymentStrategyRequest(BaseModel):
    DeploymentDurationInMinutes: Optional[MinutesBetween0And24Hours] = None
    Description_1: Optional[Description] = Field(None, alias='Description')
    FinalBakeTimeInMinutes: Optional[MinutesBetween0And24Hours] = None
    GrowthFactor_1: Optional[GrowthFactor] = Field(None, alias='GrowthFactor')
    GrowthType_1: Optional[GrowthType] = Field(None, alias='GrowthType')


class Uri(RootModel[constr(min_length=1, max_length=2048)]):
    root: constr(min_length=1, max_length=2048)


class ValidateConfigurationRequest(BaseModel):
    pass


class ValidatorType(Enum):
    JSON_SCHEMA = 'JSON_SCHEMA'
    LAMBDA = 'LAMBDA'


class ValidatorTypeList(RootModel[List[ValidatorType]]):
    root: List[ValidatorType] = Field(..., max_length=2, min_length=0)


class Version(RootModel[constr(min_length=1, max_length=1024)]):
    root: constr(min_length=1, max_length=1024)


class VersionLabel(
    RootModel[constr(pattern=r'.*[^0-9].*', min_length=1, max_length=64)]
):
    root: constr(pattern=r'.*[^0-9].*', min_length=1, max_length=64)


class ApplicationsPostRequest(BaseModel):
    Description: Optional[constr(min_length=0, max_length=1024)] = Field(
        None, description='A description of the application.'
    )
    Name: constr(min_length=1, max_length=64) = Field(
        ..., description='A name for the application.'
    )
    Tags: Optional[Dict[str, TagValue]] = Field(
        None,
        description='Metadata to assign to the application. Tags help organize and categorize your AppConfig resources. Each tag consists of a key and an optional value, both of which you define.',
    )


class ApplicationsApplicationIdPatchRequest(BaseModel):
    Description: Optional[constr(min_length=0, max_length=1024)] = Field(
        None, description='A description of the application.'
    )
    Name: Optional[constr(min_length=1, max_length=64)] = Field(
        None, description='The name of the application.'
    )


class ApplicationsApplicationIdConfigurationprofilesConfigurationProfileIdHostedconfigurationversionsContentTypePostRequest(
    BaseModel
):
    Content: SecretStr = Field(
        ..., description='The content of the configuration or the configuration data.'
    )


class ApplicationsApplicationIdEnvironmentsEnvironmentIdDeploymentsPostRequest(
    BaseModel
):
    ConfigurationProfileId: constr(pattern=r'[a-z0-9]{4,7}') = Field(
        ..., description='The configuration profile ID.'
    )
    ConfigurationVersion: constr(min_length=1, max_length=1024) = Field(
        ...,
        description='The configuration version to deploy. If deploying an AppConfig hosted configuration version, you can specify either the version number or version label.',
    )
    DeploymentStrategyId: constr(
        pattern=r'(^[a-z0-9]{4,7}$|^AppConfig\.[A-Za-z0-9]{9,40}$)'
    ) = Field(..., description='The deployment strategy ID.')
    Description: Optional[constr(min_length=0, max_length=1024)] = Field(
        None, description='A description of the deployment.'
    )
    KmsKeyIdentifier: Optional[constr(min_length=1, max_length=2048)] = Field(
        None,
        description='The KMS key identifier (key ID, key alias, or key ARN). AppConfig uses this ID to encrypt the configuration data using a customer managed key. ',
    )
    Tags: Optional[Dict[str, TagValue]] = Field(
        None,
        description='Metadata to assign to the deployment. Tags help organize and categorize your AppConfig resources. Each tag consists of a key and an optional value, both of which you define.',
    )


class DeploymentstrategiesPostRequest(BaseModel):
    DeploymentDurationInMinutes: conint(ge=0, le=1440) = Field(
        ..., description='Total amount of time for a deployment to last.'
    )
    Description: Optional[constr(min_length=0, max_length=1024)] = Field(
        None, description='A description of the deployment strategy.'
    )
    FinalBakeTimeInMinutes: Optional[conint(ge=0, le=1440)] = Field(
        None,
        description='Specifies the amount of time AppConfig monitors for Amazon CloudWatch alarms after the configuration has been deployed to 100% of its targets, before considering the deployment to be complete. If an alarm is triggered during this time, AppConfig rolls back the deployment. You must configure permissions for AppConfig to roll back based on CloudWatch alarms. For more information, see <a href="https://docs.aws.amazon.com/appconfig/latest/userguide/getting-started-with-appconfig-cloudwatch-alarms-permissions.html">Configuring permissions for rollback based on Amazon CloudWatch alarms</a> in the <i>AppConfig User Guide</i>.',
    )
    GrowthFactor: confloat(ge=1.0, le=100.0) = Field(
        ...,
        description='The percentage of targets to receive a deployed configuration during each interval.',
    )
    GrowthType_1: Optional[GrowthType] = Field(
        None,
        alias='GrowthType',
        description='<p>The algorithm used to define how percentage grows over time. AppConfig supports the following growth types:</p> <p> <b>Linear</b>: For this type, AppConfig processes the deployment by dividing the total number of targets by the value specified for <code>Step percentage</code>. For example, a linear deployment that uses a <code>Step percentage</code> of 10 deploys the configuration to 10 percent of the hosts. After those deployments are complete, the system deploys the configuration to the next 10 percent. This continues until 100% of the targets have successfully received the configuration.</p> <p> <b>Exponential</b>: For this type, AppConfig processes the deployment exponentially using the following formula: <code>G*(2^N)</code>. In this formula, <code>G</code> is the growth factor specified by the user and <code>N</code> is the number of steps until the configuration is deployed to all targets. For example, if you specify a growth factor of 2, then the system rolls out the configuration as follows:</p> <p> <code>2*(2^0)</code> </p> <p> <code>2*(2^1)</code> </p> <p> <code>2*(2^2)</code> </p> <p>Expressed numerically, the deployment rolls out as follows: 2% of the targets, 4% of the targets, 8% of the targets, and continues until the configuration has been deployed to all targets.</p>',
    )
    Name: constr(min_length=1, max_length=64) = Field(
        ..., description='A name for the deployment strategy.'
    )
    ReplicateTo_1: Optional[ReplicateTo] = Field(
        None,
        alias='ReplicateTo',
        description='Save the deployment strategy to a Systems Manager (SSM) document.',
    )
    Tags: Optional[Dict[str, TagValue]] = Field(
        None,
        description='Metadata to assign to the deployment strategy. Tags help organize and categorize your AppConfig resources. Each tag consists of a key and an optional value, both of which you define.',
    )


class DeploymentstrategiesDeploymentStrategyIdPatchRequest(BaseModel):
    DeploymentDurationInMinutes: Optional[conint(ge=0, le=1440)] = Field(
        None, description='Total amount of time for a deployment to last.'
    )
    Description: Optional[constr(min_length=0, max_length=1024)] = Field(
        None, description='A description of the deployment strategy.'
    )
    FinalBakeTimeInMinutes: Optional[conint(ge=0, le=1440)] = Field(
        None,
        description='The amount of time that AppConfig monitors for alarms before considering the deployment to be complete and no longer eligible for automatic rollback.',
    )
    GrowthFactor: Optional[confloat(ge=1.0, le=100.0)] = Field(
        None,
        description='The percentage of targets to receive a deployed configuration during each interval.',
    )
    GrowthType_1: Optional[GrowthType] = Field(
        None,
        alias='GrowthType',
        description='<p>The algorithm used to define how percentage grows over time. AppConfig supports the following growth types:</p> <p> <b>Linear</b>: For this type, AppConfig processes the deployment by increments of the growth factor evenly distributed over the deployment time. For example, a linear deployment that uses a growth factor of 20 initially makes the configuration available to 20 percent of the targets. After 1/5th of the deployment time has passed, the system updates the percentage to 40 percent. This continues until 100% of the targets are set to receive the deployed configuration.</p> <p> <b>Exponential</b>: For this type, AppConfig processes the deployment exponentially using the following formula: <code>G*(2^N)</code>. In this formula, <code>G</code> is the growth factor specified by the user and <code>N</code> is the number of steps until the configuration is deployed to all targets. For example, if you specify a growth factor of 2, then the system rolls out the configuration as follows:</p> <p> <code>2*(2^0)</code> </p> <p> <code>2*(2^1)</code> </p> <p> <code>2*(2^2)</code> </p> <p>Expressed numerically, the deployment rolls out as follows: 2% of the targets, 4% of the targets, 8% of the targets, and continues until the configuration has been deployed to all targets.</p>',
    )


class ExtensionassociationsPostRequest(BaseModel):
    ExtensionIdentifier: constr(min_length=1, max_length=2048) = Field(
        ...,
        description='The name, the ID, or the Amazon Resource Name (ARN) of the extension.',
    )
    ExtensionVersionNumber: Optional[int] = Field(
        None,
        description='The version number of the extension. If not specified, AppConfig uses the maximum version of the extension.',
    )
    Parameters: Optional[Dict[str, StringWithLengthBetween1And2048]] = Field(
        None,
        description='The parameter names and values defined in the extensions. Extension parameters marked <code>Required</code> must be entered for this field.',
    )
    ResourceIdentifier: constr(min_length=1, max_length=2048) = Field(
        ...,
        description='The ARN of an application, configuration profile, or environment.',
    )
    Tags: Optional[Dict[str, TagValue]] = Field(
        None,
        description='Adds one or more tags for the specified extension association. Tags are metadata that help you categorize resources in different ways, for example, by purpose, owner, or environment. Each tag consists of a key and an optional value, both of which you define. ',
    )


class ExtensionassociationsExtensionAssociationIdPatchRequest(BaseModel):
    Parameters: Optional[Dict[str, StringWithLengthBetween1And2048]] = Field(
        None, description='The parameter names and values defined in the extension.'
    )


class TagsResourceArnPostRequest(BaseModel):
    Tags: Dict[str, TagValue] = Field(
        ...,
        description='The key-value string map. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.',
    )


class TagKeys(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=50, min_length=0)


class Action(BaseModel):
    Description_1: Optional[Description] = Field(None, alias='Description')
    Name_1: Optional[Name] = Field(None, alias='Name')
    RoleArn: Optional[Arn] = None
    Uri_1: Optional[Uri] = Field(None, alias='Uri')


class ActionInvocation(BaseModel):
    ActionName: Optional[Name] = None
    ErrorCode: Optional[String] = None
    ErrorMessage: Optional[String] = None
    ExtensionIdentifier: Optional[Identifier] = None
    InvocationId: Optional[Id] = None
    RoleArn: Optional[Arn] = None
    Uri_1: Optional[Uri] = Field(None, alias='Uri')


class ActionInvocations(RootModel[List[ActionInvocation]]):
    root: List[ActionInvocation]


class ActionList(RootModel[List[Action]]):
    root: List[Action] = Field(..., max_length=1, min_length=1)


class ActionsMap(RootModel[Optional[Dict[str, ActionList]]]):
    root: Optional[Dict[str, ActionList]] = None


class Application(BaseModel):
    Description_1: Optional[Description] = Field(None, alias='Description')
    Id_1: Optional[Id] = Field(None, alias='Id')
    Name_1: Optional[Name] = Field(None, alias='Name')


class ApplicationList(RootModel[List[Application]]):
    root: List[Application]


class Applications(BaseModel):
    Items: Optional[ApplicationList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ConfigurationProfileSummary(BaseModel):
    ApplicationId: Optional[Id] = None
    Id_1: Optional[Id] = Field(None, alias='Id')
    LocationUri: Optional[Uri] = None
    Name: Optional[LongName] = None
    Type: Optional[ConfigurationProfileType] = None
    ValidatorTypes: Optional[ValidatorTypeList] = None


class ConfigurationProfileSummaryList(RootModel[List[ConfigurationProfileSummary]]):
    root: List[ConfigurationProfileSummary]


class ConfigurationProfiles(BaseModel):
    Items: Optional[ConfigurationProfileSummaryList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DeploymentEvent(BaseModel):
    ActionInvocations_1: Optional[ActionInvocations] = Field(
        None, alias='ActionInvocations'
    )
    Description_1: Optional[Description] = Field(None, alias='Description')
    EventType: Optional[DeploymentEventType] = None
    OccurredAt: Optional[Iso8601DateTime] = None
    TriggeredBy_1: Optional[TriggeredBy] = Field(None, alias='TriggeredBy')


class DeploymentEvents(RootModel[List[DeploymentEvent]]):
    root: List[DeploymentEvent]


class DeploymentStrategy(BaseModel):
    DeploymentDurationInMinutes: Optional[MinutesBetween0And24Hours] = None
    Description_1: Optional[Description] = Field(None, alias='Description')
    FinalBakeTimeInMinutes: Optional[MinutesBetween0And24Hours] = None
    GrowthFactor: Optional[Percentage] = None
    GrowthType_1: Optional[GrowthType] = Field(None, alias='GrowthType')
    Id_1: Optional[Id] = Field(None, alias='Id')
    Name_1: Optional[Name] = Field(None, alias='Name')
    ReplicateTo_1: Optional[ReplicateTo] = Field(None, alias='ReplicateTo')


class DeploymentStrategyList(RootModel[List[DeploymentStrategy]]):
    root: List[DeploymentStrategy]


class DeploymentSummary(BaseModel):
    CompletedAt: Optional[Iso8601DateTime] = None
    ConfigurationName: Optional[Name] = None
    ConfigurationVersion: Optional[Version] = None
    DeploymentDurationInMinutes: Optional[MinutesBetween0And24Hours] = None
    DeploymentNumber: Optional[Integer] = None
    FinalBakeTimeInMinutes: Optional[MinutesBetween0And24Hours] = None
    GrowthFactor: Optional[Percentage] = None
    GrowthType_1: Optional[GrowthType] = Field(None, alias='GrowthType')
    PercentageComplete: Optional[Percentage] = None
    StartedAt: Optional[Iso8601DateTime] = None
    State: Optional[DeploymentState] = None


class Extension(BaseModel):
    Actions: Optional[ActionsMap] = None
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    Description_1: Optional[Description] = Field(None, alias='Description')
    Id_1: Optional[Id] = Field(None, alias='Id')
    Name_1: Optional[Name] = Field(None, alias='Name')
    Parameters: Optional[ParameterMap] = None
    VersionNumber: Optional[Integer] = None


class ExtensionAssociationSummary(BaseModel):
    ExtensionArn: Optional[Arn] = None
    Id: Optional[Identifier] = None
    ResourceArn: Optional[Arn] = None


class ExtensionSummary(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    Description_1: Optional[Description] = Field(None, alias='Description')
    Id_1: Optional[Id] = Field(None, alias='Id')
    Name_1: Optional[Name] = Field(None, alias='Name')
    VersionNumber: Optional[Integer] = None


class HostedConfigurationVersionSummary(BaseModel):
    ApplicationId: Optional[Id] = None
    ConfigurationProfileId: Optional[Id] = None
    ContentType: Optional[StringWithLengthBetween1And255] = None
    Description_1: Optional[Description] = Field(None, alias='Description')
    VersionLabel_1: Optional[VersionLabel] = Field(None, alias='VersionLabel')
    VersionNumber: Optional[Integer] = None


class HostedConfigurationVersionSummaryList(
    RootModel[List[HostedConfigurationVersionSummary]]
):
    root: List[HostedConfigurationVersionSummary]


class HostedConfigurationVersions(BaseModel):
    Items: Optional[HostedConfigurationVersionSummaryList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class Monitor(BaseModel):
    AlarmArn: StringWithLengthBetween1And2048
    AlarmRoleArn: Optional[RoleArn] = None


class MonitorList(RootModel[List[Monitor]]):
    root: List[Monitor] = Field(..., max_length=5, min_length=0)


class ParameterValueMap(
    RootModel[Optional[Dict[str, StringWithLengthBetween1And2048]]]
):
    root: Optional[Dict[str, StringWithLengthBetween1And2048]] = None


class TagMap(RootModel[Optional[Dict[str, TagValue]]]):
    root: Optional[Dict[str, TagValue]] = None


class TagResourceRequest(BaseModel):
    Tags: TagMap


class UpdateEnvironmentRequest(BaseModel):
    Description_1: Optional[Description] = Field(None, alias='Description')
    Monitors: Optional[MonitorList] = None
    Name_1: Optional[Name] = Field(None, alias='Name')


class UpdateExtensionAssociationRequest(BaseModel):
    Parameters: Optional[ParameterValueMap] = None


class UpdateExtensionRequest(BaseModel):
    Actions: Optional[ActionsMap] = None
    Description_1: Optional[Description] = Field(None, alias='Description')
    Parameters: Optional[ParameterMap] = None
    VersionNumber: Optional[Integer] = None


class Validator(BaseModel):
    Content: StringWithLengthBetween0And32768
    Type: ValidatorType


class ValidatorList(RootModel[List[Validator]]):
    root: List[Validator] = Field(..., max_length=2, min_length=0)


class ApplicationsApplicationIdConfigurationprofilesPostRequest(BaseModel):
    Description: Optional[constr(min_length=0, max_length=1024)] = Field(
        None, description='A description of the configuration profile.'
    )
    LocationUri: constr(min_length=1, max_length=2048) = Field(
        ...,
        description='<p>A URI to locate the configuration. You can specify the following:</p> <ul> <li> <p>For the AppConfig hosted configuration store and for feature flags, specify <code>hosted</code>.</p> </li> <li> <p>For an Amazon Web Services Systems Manager Parameter Store parameter, specify either the parameter name in the format <code>ssm-parameter://&lt;parameter name&gt;</code> or the ARN.</p> </li> <li> <p>For an Secrets Manager secret, specify the URI in the following format: <code>secrets-manager</code>://&lt;secret name&gt;.</p> </li> <li> <p>For an Amazon S3 object, specify the URI in the following format: <code>s3://&lt;bucket&gt;/&lt;objectKey&gt; </code>. Here is an example: <code>s3://my-bucket/my-app/us-east-1/my-config.json</code> </p> </li> <li> <p>For an SSM document, specify either the document name in the format <code>ssm-document://&lt;document name&gt;</code> or the Amazon Resource Name (ARN).</p> </li> </ul>',
    )
    Name: constr(min_length=1, max_length=128) = Field(
        ..., description='A name for the configuration profile.'
    )
    RetrievalRoleArn: Optional[
        constr(
            pattern=r'^((arn):(aws|aws-cn|aws-iso|aws-iso-[a-z]{1}|aws-us-gov):(iam)::\d{12}:role[/].*)$',
            min_length=20,
            max_length=2048,
        )
    ] = Field(
        None,
        description='<p>The ARN of an IAM role with permission to access the configuration at the specified <code>LocationUri</code>.</p> <important> <p>A retrieval role ARN is not required for configurations stored in the AppConfig hosted configuration store. It is required for all other sources that store your configuration. </p> </important>',
    )
    Tags: Optional[Dict[str, TagValue]] = Field(
        None,
        description='Metadata to assign to the configuration profile. Tags help organize and categorize your AppConfig resources. Each tag consists of a key and an optional value, both of which you define.',
    )
    Type: Optional[constr(pattern=r'^[a-zA-Z\.]+')] = Field(
        None,
        description='<p>The type of configurations contained in the profile. AppConfig supports <code>feature flags</code> and <code>freeform</code> configurations. We recommend you create feature flag configurations to enable or disable new features and freeform configurations to distribute configurations to an application. When calling this API, enter one of the following values for <code>Type</code>:</p> <p> <code>AWS.AppConfig.FeatureFlags</code> </p> <p> <code>AWS.Freeform</code> </p>',
    )
    Validators: Optional[List[Validator]] = Field(
        None,
        description='A list of methods for validating the configuration.',
        max_length=2,
        min_length=0,
    )


class ApplicationsApplicationIdConfigurationprofilesConfigurationProfileIdPatchRequest(
    BaseModel
):
    Description: Optional[constr(min_length=0, max_length=1024)] = Field(
        None, description='A description of the configuration profile.'
    )
    Name: Optional[constr(min_length=1, max_length=64)] = Field(
        None, description='The name of the configuration profile.'
    )
    RetrievalRoleArn: Optional[
        constr(
            pattern=r'^((arn):(aws|aws-cn|aws-iso|aws-iso-[a-z]{1}|aws-us-gov):(iam)::\d{12}:role[/].*)$',
            min_length=20,
            max_length=2048,
        )
    ] = Field(
        None,
        description='The ARN of an IAM role with permission to access the configuration at the specified <code>LocationUri</code>.',
    )
    Validators: Optional[List[Validator]] = Field(
        None,
        description='A list of methods for validating the configuration.',
        max_length=2,
        min_length=0,
    )


class ApplicationsApplicationIdEnvironmentsPostRequest(BaseModel):
    Description: Optional[constr(min_length=0, max_length=1024)] = Field(
        None, description='A description of the environment.'
    )
    Monitors: Optional[List[Monitor]] = Field(
        None,
        description='Amazon CloudWatch alarms to monitor during the deployment process.',
        max_length=5,
        min_length=0,
    )
    Name: constr(min_length=1, max_length=64) = Field(
        ..., description='A name for the environment.'
    )
    Tags: Optional[Dict[str, TagValue]] = Field(
        None,
        description='Metadata to assign to the environment. Tags help organize and categorize your AppConfig resources. Each tag consists of a key and an optional value, both of which you define.',
    )


class ApplicationsApplicationIdEnvironmentsEnvironmentIdPatchRequest(BaseModel):
    Description: Optional[constr(min_length=0, max_length=1024)] = Field(
        None, description='A description of the environment.'
    )
    Monitors: Optional[List[Monitor]] = Field(
        None,
        description='Amazon CloudWatch alarms to monitor during the deployment process.',
        max_length=5,
        min_length=0,
    )
    Name: Optional[constr(min_length=1, max_length=64)] = Field(
        None, description='The name of the environment.'
    )


class ExtensionsPostRequest(BaseModel):
    Actions: Dict[str, ActionList] = Field(
        ..., description='The actions defined in the extension.'
    )
    Description: Optional[constr(min_length=0, max_length=1024)] = Field(
        None, description='Information about the extension.'
    )
    Name: constr(min_length=1, max_length=64) = Field(
        ...,
        description='A name for the extension. Each extension name in your account must be unique. Extension versions use the same name.',
    )
    Parameters: Optional[Dict[str, Parameter]] = Field(
        None,
        description='The parameters accepted by the extension. You specify parameter values when you associate the extension to an AppConfig resource by using the <code>CreateExtensionAssociation</code> API action. For Lambda extension actions, these parameters are included in the Lambda request object.',
    )
    Tags: Optional[Dict[str, TagValue]] = Field(
        None,
        description='Adds one or more tags for the specified extension. Tags are metadata that help you categorize resources in different ways, for example, by purpose, owner, or environment. Each tag consists of a key and an optional value, both of which you define. ',
    )


class ExtensionsExtensionIdentifierPatchRequest(BaseModel):
    Actions: Optional[Dict[str, ActionList]] = Field(
        None, description='The actions defined in the extension.'
    )
    Description: Optional[constr(min_length=0, max_length=1024)] = Field(
        None, description='Information about the extension.'
    )
    Parameters: Optional[Dict[str, Parameter]] = Field(
        None,
        description='One or more parameters for the actions called by the extension.',
    )
    VersionNumber: Optional[int] = Field(
        None, description='The extension version number.'
    )


class AppliedExtension(BaseModel):
    ExtensionAssociationId: Optional[Id] = None
    ExtensionId: Optional[Id] = None
    Parameters: Optional[ParameterValueMap] = None
    VersionNumber: Optional[Integer] = None


class AppliedExtensions(RootModel[List[AppliedExtension]]):
    root: List[AppliedExtension]


class ConfigurationProfile(BaseModel):
    ApplicationId: Optional[Id] = None
    Description_1: Optional[Description] = Field(None, alias='Description')
    Id_1: Optional[Id] = Field(None, alias='Id')
    LocationUri: Optional[Uri] = None
    Name: Optional[LongName] = None
    RetrievalRoleArn: Optional[RoleArn] = None
    Type: Optional[ConfigurationProfileType] = None
    Validators: Optional[ValidatorList] = None


class CreateApplicationRequest(BaseModel):
    Description_1: Optional[Description] = Field(None, alias='Description')
    Name_1: Name = Field(..., alias='Name')
    Tags: Optional[TagMap] = None


class CreateConfigurationProfileRequest(BaseModel):
    Description_1: Optional[Description] = Field(None, alias='Description')
    LocationUri: Uri
    Name: LongName
    RetrievalRoleArn: Optional[RoleArn] = None
    Tags: Optional[TagMap] = None
    Type: Optional[ConfigurationProfileType] = None
    Validators: Optional[ValidatorList] = None


class CreateDeploymentStrategyRequest(BaseModel):
    DeploymentDurationInMinutes: MinutesBetween0And24Hours
    Description_1: Optional[Description] = Field(None, alias='Description')
    FinalBakeTimeInMinutes: Optional[MinutesBetween0And24Hours] = None
    GrowthFactor_1: GrowthFactor = Field(..., alias='GrowthFactor')
    GrowthType_1: Optional[GrowthType] = Field(None, alias='GrowthType')
    Name_1: Name = Field(..., alias='Name')
    ReplicateTo_1: Optional[ReplicateTo] = Field(None, alias='ReplicateTo')
    Tags: Optional[TagMap] = None


class CreateEnvironmentRequest(BaseModel):
    Description_1: Optional[Description] = Field(None, alias='Description')
    Monitors: Optional[MonitorList] = None
    Name_1: Name = Field(..., alias='Name')
    Tags: Optional[TagMap] = None


class CreateExtensionAssociationRequest(BaseModel):
    ExtensionIdentifier: Identifier
    ExtensionVersionNumber: Optional[Integer] = None
    Parameters: Optional[ParameterValueMap] = None
    ResourceIdentifier: Identifier
    Tags: Optional[TagMap] = None


class CreateExtensionRequest(BaseModel):
    Actions: ActionsMap
    Description_1: Optional[Description] = Field(None, alias='Description')
    Name_1: Name = Field(..., alias='Name')
    Parameters: Optional[ParameterMap] = None
    Tags: Optional[TagMap] = None


class Deployment(BaseModel):
    ApplicationId: Optional[Id] = None
    AppliedExtensions_1: Optional[AppliedExtensions] = Field(
        None, alias='AppliedExtensions'
    )
    CompletedAt: Optional[Iso8601DateTime] = None
    ConfigurationLocationUri: Optional[Uri] = None
    ConfigurationName: Optional[Name] = None
    ConfigurationProfileId: Optional[Id] = None
    ConfigurationVersion: Optional[Version] = None
    DeploymentDurationInMinutes: Optional[MinutesBetween0And24Hours] = None
    DeploymentNumber: Optional[Integer] = None
    DeploymentStrategyId: Optional[Id] = None
    Description_1: Optional[Description] = Field(None, alias='Description')
    EnvironmentId: Optional[Id] = None
    EventLog: Optional[DeploymentEvents] = None
    FinalBakeTimeInMinutes: Optional[MinutesBetween0And24Hours] = None
    GrowthFactor: Optional[Percentage] = None
    GrowthType_1: Optional[GrowthType] = Field(None, alias='GrowthType')
    KmsKeyArn: Optional[Arn] = None
    KmsKeyIdentifier: Optional[Identifier] = None
    PercentageComplete: Optional[Percentage] = None
    StartedAt: Optional[Iso8601DateTime] = None
    State: Optional[DeploymentState] = None


class DeploymentList(RootModel[List[DeploymentSummary]]):
    root: List[DeploymentSummary]


class DeploymentStrategies(BaseModel):
    Items: Optional[DeploymentStrategyList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class Deployments(BaseModel):
    Items: Optional[DeploymentList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class Environment(BaseModel):
    ApplicationId: Optional[Id] = None
    Description_1: Optional[Description] = Field(None, alias='Description')
    Id_1: Optional[Id] = Field(None, alias='Id')
    Monitors: Optional[MonitorList] = None
    Name_1: Optional[Name] = Field(None, alias='Name')
    State: Optional[EnvironmentState] = None


class EnvironmentList(RootModel[List[Environment]]):
    root: List[Environment]


class Environments(BaseModel):
    Items: Optional[EnvironmentList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ExtensionAssociation(BaseModel):
    Arn_1: Optional[Arn] = Field(None, alias='Arn')
    ExtensionArn: Optional[Arn] = None
    ExtensionVersionNumber: Optional[Integer] = None
    Id: Optional[Identifier] = None
    Parameters: Optional[ParameterValueMap] = None
    ResourceArn: Optional[Arn] = None


class ExtensionAssociationSummaries(RootModel[List[ExtensionAssociationSummary]]):
    root: List[ExtensionAssociationSummary]


class ExtensionAssociations(BaseModel):
    Items: Optional[ExtensionAssociationSummaries] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ExtensionSummaries(RootModel[List[ExtensionSummary]]):
    root: List[ExtensionSummary]


class Extensions(BaseModel):
    Items: Optional[ExtensionSummaries] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ResourceTags(BaseModel):
    Tags: Optional[TagMap] = None


class StartDeploymentRequest(BaseModel):
    ConfigurationProfileId: Id
    ConfigurationVersion: Version
    DeploymentStrategyId_1: DeploymentStrategyId = Field(
        ..., alias='DeploymentStrategyId'
    )
    Description_1: Optional[Description] = Field(None, alias='Description')
    KmsKeyIdentifier: Optional[Identifier] = None
    Tags: Optional[TagMap] = None


class UpdateConfigurationProfileRequest(BaseModel):
    Description_1: Optional[Description] = Field(None, alias='Description')
    Name_1: Optional[Name] = Field(None, alias='Name')
    RetrievalRoleArn: Optional[RoleArn] = None
    Validators: Optional[ValidatorList] = None
